{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vn100\\\\Desktop\\\\Ecommerce\\\\client\\\\src\\\\components\\\\forms\\\\FileUpload.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport Resizer from 'react-image-file-resizer';\nimport axios from 'axios';\nimport { useSelector } from 'react-redux';\nimport { Avatar, Badge } from 'antd';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst FileUpload = ({\n  values,\n  setValues,\n  setLoading\n}) => {\n  _s();\n\n  const {\n    user\n  } = useSelector(state => ({ ...state\n  }));\n\n  const fileUploadAndResize = e => {\n    //console.log(e.target.files);\n    // resize\n    let files = e.target.files;\n    let allUploadedFiles = values.images;\n\n    if (files) {\n      setLoading(true);\n\n      for (let i = 0; i < files.length; i++) {\n        Resizer.imageFileResizer(files[i], 720, 720, 'JPEG', 100, 0, uri => {\n          axios.post(`${process.env.REACT_APP_API}/uploadimages`, {\n            image: uri\n          }, {\n            headers: {\n              authtoken: user ? user.token : \"\"\n            }\n          }).then(res => {\n            console.log('IMAGE UPLOAD RES DATA', res);\n            setLoading(false);\n            allUploadedFiles.push(res.data);\n            setValues({ ...values,\n              images: allUploadedFiles\n            });\n          }).catch(err => {\n            setLoading(false);\n            console.log('CLOUDINARY UPLOAD ERR', err);\n          });\n        }, \"base64\");\n      }\n    } // send back to server to upload to cloudinary\n    // set url to images[] in parent component - ProductCreate\n\n  };\n\n  const handleImageRemove = public_id => {\n    setLoading(true);\n    console.log('remove image', public_id);\n    axios.post(`${process.env.REACT_APP_API}/removeimage`, {\n      public_id\n    }, {\n      headers: {\n        authtoken: user ? user.token : \"\"\n      }\n    }).then(res => {\n      setLoading(false);\n      const {\n        images\n      } = values;\n      let filteredImages = images.filter(item => {\n        return item.public_id !== public_id;\n      });\n      setValues({ ...values,\n        images: filteredImages\n      });\n    }).catch(err => {\n      console.log(err);\n      setLoading(false);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: values.images && values.images.map(image => /*#__PURE__*/_jsxDEV(Badge, {\n        count: \"X\",\n        onClick: () => handleImageRemove(image.public_id),\n        style: {\n          cursor: \"pointer\"\n        },\n        children: /*#__PURE__*/_jsxDEV(Avatar, {\n          src: image.url,\n          size: 100,\n          shape: \"square\",\n          className: \"ml-3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 21\n        }, this)\n      }, image.public_id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"btn btn-primary btn-raised\",\n        children: [\" Choose file\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          multiple: true,\n          hidden: true,\n          accept: \"images/*\",\n          onChange: fileUploadAndResize\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(FileUpload, \"Jxgif+QfY7+MStbF+F1uZ9ypUGY=\", false, function () {\n  return [useSelector];\n});\n\n_c = FileUpload;\nexport default FileUpload;\n\nvar _c;\n\n$RefreshReg$(_c, \"FileUpload\");","map":{"version":3,"sources":["C:/Users/vn100/Desktop/Ecommerce/client/src/components/forms/FileUpload.js"],"names":["React","Resizer","axios","useSelector","Avatar","Badge","FileUpload","values","setValues","setLoading","user","state","fileUploadAndResize","e","files","target","allUploadedFiles","images","i","length","imageFileResizer","uri","post","process","env","REACT_APP_API","image","headers","authtoken","token","then","res","console","log","push","data","catch","err","handleImageRemove","public_id","filteredImages","filter","item","map","cursor","url"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport Resizer from 'react-image-file-resizer';\r\nimport axios from 'axios'\r\nimport {useSelector} from 'react-redux'\r\nimport {Avatar, Badge} from 'antd';\r\n\r\nconst FileUpload = ({values, setValues, setLoading}) => {\r\n    const {user} = useSelector((state) => ({...state}));\r\n    const fileUploadAndResize = (e) => {\r\n        //console.log(e.target.files);\r\n        // resize\r\n        let files = e.target.files;\r\n        let allUploadedFiles = values.images;\r\n\r\n        if(files){\r\n            setLoading(true);\r\n            for(let i = 0; i < files.length; i++){\r\n                Resizer.imageFileResizer(\r\n                    files[i],\r\n                    720,\r\n                    720,\r\n                    'JPEG',\r\n                    100,\r\n                    0,\r\n                    (uri) => {\r\n                    axios.post(`${process.env.REACT_APP_API}/uploadimages`, {image: uri}, {\r\n                        headers: {\r\n                            authtoken: user ? user.token : \"\",\r\n                        },\r\n                    })\r\n                        .then(res => {\r\n                            console.log('IMAGE UPLOAD RES DATA', res)\r\n                            setLoading(false)\r\n                            allUploadedFiles.push(res.data);\r\n                            setValues({...values, images: allUploadedFiles});\r\n                        })\r\n                        .catch(err => {\r\n                           setLoading(false);\r\n                           console.log('CLOUDINARY UPLOAD ERR', err)\r\n                        });\r\n                }, \"base64\");\r\n            }\r\n        }\r\n        // send back to server to upload to cloudinary\r\n        // set url to images[] in parent component - ProductCreate\r\n    };\r\n\r\n    const handleImageRemove = (public_id) => {\r\n        setLoading(true);\r\n        console.log('remove image', public_id);\r\n        axios.post(`${process.env.REACT_APP_API}/removeimage`, {public_id}, {\r\n            headers: {\r\n                authtoken: user ? user.token : \"\",\r\n            },\r\n        }\r\n        ).then((res) => {\r\n                setLoading(false);\r\n                const {images} = values;\r\n                let filteredImages = images.filter((item) => {\r\n                    return item.public_id !== public_id;\r\n                });\r\n                setValues({ ...values, images: filteredImages });\r\n            })\r\n            .catch((err) => {\r\n                console.log(err);\r\n                setLoading(false);\r\n            });\r\n    }\r\n\r\n    return(\r\n    <>\r\n        <div className=\"row\">\r\n            {values.images && values.images.map((image) => (\r\n                <Badge\r\n                    count=\"X\"\r\n                    key={image.public_id}\r\n                    onClick={() => handleImageRemove(image.public_id)}\r\n                    style={ {cursor: \"pointer\" }}\r\n                >\r\n                    <Avatar\r\n\r\n                        src={image.url}\r\n                        size={100}\r\n                        shape=\"square\"\r\n                        className=\"ml-3\"/>\r\n                </Badge>\r\n            ))}\r\n        </div>\r\n        <div className=\"row\">\r\n            <label className=\"btn btn-primary btn-raised\"> Choose file\r\n                <input\r\n                    type=\"file\"\r\n                    multiple\r\n                    hidden\r\n                    accept=\"images/*\"\r\n                    onChange={fileUploadAndResize} />\r\n            </label>\r\n        </div>\r\n    </>);\r\n};\r\n\r\nexport default FileUpload;"]},"metadata":{},"sourceType":"module"}