{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vn100\\\\Desktop\\\\Ecommerce\\\\client\\\\src\\\\components\\\\forms\\\\FileUpload.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport Resizer from 'react-image-file-resizer';\nimport axios from 'axios';\nimport { useSelector } from 'react-redux';\nimport { Avatar } from 'antd';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst FileUpload = ({\n  values,\n  setValues,\n  setLoading\n}) => {\n  _s();\n\n  const {\n    user\n  } = useSelector(state => ({ ...state\n  }));\n\n  const fileUploadAndResize = e => {\n    //console.log(e.target.files);\n    // resize\n    let files = e.target.files;\n    let allUploadedFiles = values.images;\n\n    if (files) {\n      setLoading(true);\n\n      for (let i = 0; i < files.length; i++) {\n        Resizer.imageFileResizer(files[i], 720, 720, 'JPEG', 100, 0, uri => {\n          axios.post(`${process.env.REACT_APP_API}/uploadimages`, {\n            image: uri\n          }, {\n            headers: {\n              authtoken: user ? user.token : \"\"\n            }\n          }).then(res => {\n            console.log('IMAGE UPLOAD RES DATA', res);\n            setLoading(false);\n            allUploadedFiles.push(res.data);\n            setValues({ ...values,\n              images: allUploadedFiles\n            });\n          }).catch(err => {\n            setLoading(false);\n            console.log('CLOUDINARY UPLOAD ERR', err);\n          });\n        }, \"base64\");\n      }\n    } // send back to server to upload to cloudinary\n    // set url to images[] in parent component - ProductCreate\n\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: values.images && values.images.map(image => /*#__PURE__*/_jsxDEV(Avatar, {\n        src: image.url,\n        size: 100,\n        className: \"m-3\"\n      }, image.public_id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"btn btn-primary btn-raised\",\n        children: [\" Choose file\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          multiple: true,\n          hidden: true,\n          accept: \"images/*\",\n          onChange: fileUploadAndResize\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(FileUpload, \"Jxgif+QfY7+MStbF+F1uZ9ypUGY=\", false, function () {\n  return [useSelector];\n});\n\n_c = FileUpload;\nexport default FileUpload;\n\nvar _c;\n\n$RefreshReg$(_c, \"FileUpload\");","map":{"version":3,"sources":["C:/Users/vn100/Desktop/Ecommerce/client/src/components/forms/FileUpload.js"],"names":["React","Resizer","axios","useSelector","Avatar","FileUpload","values","setValues","setLoading","user","state","fileUploadAndResize","e","files","target","allUploadedFiles","images","i","length","imageFileResizer","uri","post","process","env","REACT_APP_API","image","headers","authtoken","token","then","res","console","log","push","data","catch","err","map","url","public_id"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,0BAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,WAAR,QAA0B,aAA1B;AACA,SAAQC,MAAR,QAAqB,MAArB;;;;AAEA,MAAMC,UAAU,GAAG,CAAC;AAACC,EAAAA,MAAD;AAASC,EAAAA,SAAT;AAAoBC,EAAAA;AAApB,CAAD,KAAqC;AAAA;;AACpD,QAAM;AAACC,IAAAA;AAAD,MAASN,WAAW,CAAEO,KAAD,KAAY,EAAC,GAAGA;AAAJ,GAAZ,CAAD,CAA1B;;AACA,QAAMC,mBAAmB,GAAIC,CAAD,IAAO;AAC/B;AACA;AACA,QAAIC,KAAK,GAAGD,CAAC,CAACE,MAAF,CAASD,KAArB;AACA,QAAIE,gBAAgB,GAAGT,MAAM,CAACU,MAA9B;;AAEA,QAAGH,KAAH,EAAS;AACLL,MAAAA,UAAU,CAAC,IAAD,CAAV;;AACA,WAAI,IAAIS,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGJ,KAAK,CAACK,MAAzB,EAAiCD,CAAC,EAAlC,EAAqC;AACjChB,QAAAA,OAAO,CAACkB,gBAAR,CACIN,KAAK,CAACI,CAAD,CADT,EAEI,GAFJ,EAGI,GAHJ,EAII,MAJJ,EAKI,GALJ,EAMI,CANJ,EAOKG,GAAD,IAAS;AACTlB,UAAAA,KAAK,CAACmB,IAAN,CAAY,GAAEC,OAAO,CAACC,GAAR,CAAYC,aAAc,eAAxC,EAAwD;AAACC,YAAAA,KAAK,EAAEL;AAAR,WAAxD,EAAsE;AAClEM,YAAAA,OAAO,EAAE;AACLC,cAAAA,SAAS,EAAElB,IAAI,GAAGA,IAAI,CAACmB,KAAR,GAAgB;AAD1B;AADyD,WAAtE,EAKKC,IALL,CAKUC,GAAG,IAAI;AACTC,YAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCF,GAArC;AACAtB,YAAAA,UAAU,CAAC,KAAD,CAAV;AACAO,YAAAA,gBAAgB,CAACkB,IAAjB,CAAsBH,GAAG,CAACI,IAA1B;AACA3B,YAAAA,SAAS,CAAC,EAAC,GAAGD,MAAJ;AAAYU,cAAAA,MAAM,EAAED;AAApB,aAAD,CAAT;AACH,WAVL,EAWKoB,KAXL,CAWWC,GAAG,IAAI;AACX5B,YAAAA,UAAU,CAAC,KAAD,CAAV;AACAuB,YAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCI,GAArC;AACF,WAdL;AAeH,SAvBD,EAuBG,QAvBH;AAwBH;AACJ,KAlC8B,CAmC/B;AACA;;AACH,GArCD;;AAuCA,sBACA;AAAA,4BACI;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,gBACK9B,MAAM,CAACU,MAAP,IAAiBV,MAAM,CAACU,MAAP,CAAcqB,GAAd,CAAmBZ,KAAD,iBAChC,QAAC,MAAD;AAEI,QAAA,GAAG,EAAEA,KAAK,CAACa,GAFf;AAGI,QAAA,IAAI,EAAE,GAHV;AAII,QAAA,SAAS,EAAC;AAJd,SACSb,KAAK,CAACc,SADf;AAAA;AAAA;AAAA;AAAA,cADc;AADtB;AAAA;AAAA;AAAA;AAAA,YADJ,eAUI;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,6BACI;AAAO,QAAA,SAAS,EAAC,4BAAjB;AAAA,gDACI;AACI,UAAA,IAAI,EAAC,MADT;AAEI,UAAA,QAAQ,MAFZ;AAGI,UAAA,MAAM,MAHV;AAII,UAAA,MAAM,EAAC,UAJX;AAKI,UAAA,QAAQ,EAAE5B;AALd;AAAA;AAAA;AAAA;AAAA,gBADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAVJ;AAAA,kBADA;AAsBH,CA/DD;;GAAMN,U;UACaF,W;;;KADbE,U;AAiEN,eAAeA,UAAf","sourcesContent":["import React from 'react'\r\nimport Resizer from 'react-image-file-resizer';\r\nimport axios from 'axios'\r\nimport {useSelector} from 'react-redux'\r\nimport {Avatar} from 'antd';\r\n\r\nconst FileUpload = ({values, setValues, setLoading}) => {\r\n    const {user} = useSelector((state) => ({...state}));\r\n    const fileUploadAndResize = (e) => {\r\n        //console.log(e.target.files);\r\n        // resize\r\n        let files = e.target.files;\r\n        let allUploadedFiles = values.images;\r\n\r\n        if(files){\r\n            setLoading(true);\r\n            for(let i = 0; i < files.length; i++){\r\n                Resizer.imageFileResizer(\r\n                    files[i],\r\n                    720,\r\n                    720,\r\n                    'JPEG',\r\n                    100,\r\n                    0,\r\n                    (uri) => {\r\n                    axios.post(`${process.env.REACT_APP_API}/uploadimages`, {image: uri}, {\r\n                        headers: {\r\n                            authtoken: user ? user.token : \"\",\r\n                        },\r\n                    })\r\n                        .then(res => {\r\n                            console.log('IMAGE UPLOAD RES DATA', res)\r\n                            setLoading(false)\r\n                            allUploadedFiles.push(res.data);\r\n                            setValues({...values, images: allUploadedFiles});\r\n                        })\r\n                        .catch(err => {\r\n                           setLoading(false);\r\n                           console.log('CLOUDINARY UPLOAD ERR', err)\r\n                        });\r\n                }, \"base64\");\r\n            }\r\n        }\r\n        // send back to server to upload to cloudinary\r\n        // set url to images[] in parent component - ProductCreate\r\n    };\r\n\r\n    return(\r\n    <>\r\n        <div className=\"row\">\r\n            {values.images && values.images.map((image) => (\r\n                <Avatar\r\n                    key={image.public_id}\r\n                    src={image.url}\r\n                    size={100} \r\n                    className=\"m-3\"/>\r\n            ))}\r\n        </div>\r\n        <div className=\"row\">\r\n            <label className=\"btn btn-primary btn-raised\"> Choose file\r\n                <input\r\n                    type=\"file\"\r\n                    multiple\r\n                    hidden\r\n                    accept=\"images/*\"\r\n                    onChange={fileUploadAndResize} />\r\n            </label>\r\n        </div>\r\n        </>);\r\n};\r\n\r\nexport default FileUpload;"]},"metadata":{},"sourceType":"module"}